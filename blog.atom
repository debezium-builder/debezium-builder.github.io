<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
>
	<channel>
		<title></title>
		<description>Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</description>		
		<sy:updatePeriod>daily</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
		<link>https://debezium.io</link>
		<atom:link href="https://debezium.io/blog.atom" rel="self" type="application/rss+xml" />
		<lastBuildDate>Wed, 24 Mar 2021 00:00:00 +0000</lastBuildDate>
		
		
			<item>
				<title>Debezium 1.5.0.CR1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s my pleasure to announce the release of Debezium &lt;strong&gt;1.5.0.CR1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we begin moving toward finalizing the Debezium 1.5 release stream,
the Oracle connector has been promoted to stable and there were some TLS improvements for the Cassandra connector, as well as numerous bugfixes.
Overall, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.CR1%20ORDER%20BY%20issuetype%20DESC&amp;amp;startIndex=20&quot;&gt;50 issues&lt;/a&gt; have been addressed for this release.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/03/24/debezium-1-5-cr1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/03/24/debezium-1-5-cr1-released/</guid>
			</item>
		
			<item>
				<title>Understanding Non-Key Joins With the Quarkus Extension for Kafka Streams</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot;&gt;Kafka Streams&lt;/a&gt; is a library for developing stream processing applications based on Apache Kafka.
Quoting its docs, &quot;a Kafka Streams application processes record streams through a topology in real-time, processing data continuously, concurrently, and in a record-by-record manner&quot;.
The Kafka Streams DSL provides a range of stream processing operations such as a map, filter, join, and aggregate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non_key_joins_in_kafka_streams&quot;&gt;Non-Key Joins in Kafka Streams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Debezium’s CDC source connectors make it easy to capture data changes in databases and push them towards sink systems such as Elasticsearch in near real-time.
By default, this results in a 1:1 relationship between tables in the source database, the corresponding Kafka topics,
and a representation of the data at the sink side, such as a search index in Elasticsearch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case of 1:n relationships, say between a table of customers and a table of addresses,
consumers often are interested  in a view of the data that is a single, nested data structure, e.g. a single Elasticsearch document representing a customer and all their addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is where &lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-213+Support+non-key+joining+in+KTable&quot;&gt;KIP-213&lt;/a&gt; (&quot;Kafka Improvement Proposal&quot;) and its foreign key joining capabilities come in:
it was introduced in &lt;a href=&quot;https://kafka.apache.org&quot;&gt;Apache Kafka&lt;/a&gt; 2.4 &quot;to close the gap between the semantics of KTables in streams and tables in relational databases&quot;.
Before KIP-213, in order to join messages from two Debezium change event topics, you&amp;#8217;d typically have to manually re-key at least one of the topics, so to make sure the same key is used on both sides of the join.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to KIP-213, this isn&amp;#8217;t needed any longer, as it allows to join two Kafka topics on fields extracted from the Kafka message value,
taking care of the required re-keying automatically, in a fully transparent way.
Comparing to &lt;a href=&quot;/blog/2018/03/08/creating-ddd-aggregates-with-debezium-and-kafka-streams/&quot;&gt;previous approaches&lt;/a&gt;,
this drastically reduces the effort for creating aggregated events from Debezium’s CDC events.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams/</guid>
			</item>
		
			<item>
				<title>Debezium 1.5.0.Beta2 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are very happy to announce the release of Debezium &lt;strong&gt;1.5.0.Beta2&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main features of this release is the new Debezium Signaling Table support,
Vitess SET type support, and
a continued focus to minor improvements, bugfixes, and polish as we sprint to the finish line for the 1.5 release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the community fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.Beta2%20ORDER%20BY%20issuetype%20DESC&quot;&gt;54 issues&lt;/a&gt; since the Beta1 release,
some of which we&amp;#8217;ll explore more in-depth below.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/03/15/debezium-1-5-beta2-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/03/15/debezium-1-5-beta2-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.5.0.Beta1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m very happy to announce the release of Debezium &lt;strong&gt;1.5.0.Beta1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release adds a brand-new component&amp;#8201;&amp;#8212;&amp;#8201;the web-based Debezium UI --, transaction metadata support for the MySQL connector,
a large number of improvements to the LogMiner-based capture implementation for the Debezium Oracle connector,
support for Vitess 9.0, and much more.
Let&amp;#8217;s explore some of the new features in the following.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/02/24/debezium-1-5-beta1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/02/24/debezium-1-5-beta1-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.5.0.Alpha1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.5 series, &lt;strong&gt;1.5.0.Alpha1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release brings many improvements to the LogMiner-based capture implementation for the Debezium Oracle connector,
a large overhaul of the MySQL connector,
as well as a wide range of bug fixes and other small feature additions.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/02/08/debezium-1-5-alpha1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/02/08/debezium-1-5-alpha1-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.1.Final Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.4.1.Final&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We highly recommend upgrading from 1.4.0.Final and earlier versions as this release includes bug fixes and enhancements to several Debezium connectors which includes some of the following:&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/01/28/debezium-1-4-1-final-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/01/28/debezium-1-4-1-final-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.0.Final Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce the release of Debezium &lt;strong&gt;1.4.0.Final&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release concludes the major work put into Debezium over the last three months.
Overall, the community fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20in%20(1.4.0.Final%2C%201.4.0.Alpha1%2C%201.4.0.Beta1%2C%201.4.0.CR1)%20ORDER%20BY%20issuetype%20DESC%2C%20updated%20DESC%2C%20priority%20DESC&quot;&gt;117 issues&lt;/a&gt; during that time, including the following key features and changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New &lt;a href=&quot;/documentation/reference/connectors/vitess.html&quot;&gt;Vitess&lt;/a&gt; connector, featured in an in-depth &lt;a href=&quot;/blog/2020/11/04/streaming-vitess-at-bolt/&quot;&gt;blog post&lt;/a&gt; by Kewei Shang&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fine-grained selection of snapshotted tables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL &lt;code&gt;Snapshotter&lt;/code&gt; completion hook&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed &lt;a href=&quot;/blog/2020/12/16/distributed-tracing-with-debezium/&quot;&gt;Tracing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL support for &lt;em&gt;create&lt;/em&gt; or &lt;em&gt;read&lt;/em&gt; records emitted during snapshot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many Oracle &lt;a href=&quot;/documentation/reference/connectors/oracle.html#_logminer&quot;&gt;Logminer adapter&lt;/a&gt; improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support for Oracle JDBC connection strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved reporting of DDL errors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/01/07/debezium-1-4-final-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/01/07/debezium-1-4-final-released/</guid>
			</item>
		
			<item>
				<title>Debezium in 2020 -- The Recap!</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Happy New Year to the Debezium Community!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;May all your endavours be successful, your data be consistent, and most importantly, everyone stay safe and healthy.
With 2020 in the books, I thought it&amp;#8217;d be nice to take a look back and do a quick recap of what has happened around Debezium over the last year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, some facts and numbers for you stats lovers out there:&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2021/01/06/debezium-2020-recap/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2021/01/06/debezium-2020-recap/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.0.CR1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.4.0.CR1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release focuses primarily on polishing the 1.4 release.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2020/12/17/debezium-1-4-cr1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/12/17/debezium-1-4-cr1-released/</guid>
			</item>
		
			<item>
				<title>Distributed Tracing with Debezium</title>
				
				
					<description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current pattern in application development gravitates toward microservices and microservices architecture.
While this approach gives the developer teams great flexibility in terms of independent deployments and development velocity, the drawback is at hand when you try to track a bug in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Monolithic applications sit nicely at a single place so you can introspect the code flows and the application&amp;#8217;s runtime state.
This is more challenging with microservice architectures, as a single business transaction can span across tens of services deployed in separate processes and compute nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can rely on traditional methods like logging where you need to collect and correlate logs at a single place, so you can try to reconstruct the business transaction path.
This is one of the tools in the box we can use, but it still can be crude and it will not provide all the necessary context.
&lt;a href=&quot;https://microservices.io/patterns/observability/distributed-tracing.html&quot;&gt;Distributed Tracing&lt;/a&gt; comes here to the rescue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;distributed_tracing&quot;&gt;Distributed Tracing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Distributed tracing allows services to leave breadcrumbs during the execution with enough information to create an execution path of the business transaction enriched with contextual data like &quot;who&quot;, &quot;what&quot;, and &quot;where&quot;.
SRE teams and developers can then use it to browse through the recorded executions and check for errors or anomalies in execution that can signify either problems with deployments (services unavailabe) or even bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this is where Debezium becomes part of the picture.
Data change events, as captured by Debezium from a database, and propagated via Kafka Connect and Apache Kafka to one more more downstream consumers are part of a data flow which is very valuable to have insight into.
How long does it take for change events to flow from source database to sink systems?
Where is the most time spent in the pipeline?
Are there any anomalies like spikes in end-to-end lags?
The integration of distributed tracing with Debezium can help to answer these questions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;opentracing&quot;&gt;OpenTracing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple solutions for distributed tracing, but as a starting point we have decided to follow and use the &lt;a href=&quot;https://opentracing.io/&quot;&gt;OpenTracing&lt;/a&gt; specification.
OpenTracing is an incubating project of &lt;a href=&quot;https://www.cncf.io/&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; which guarantees that the user will be free of any vendor lock-in by adhering to an open standard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenTracing project is in the process of being merged with OpenCensus to the improved &lt;a href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; standard.
Debezium uses OpenTracing at this point for alignment reasons with other projects (e.g. Quarkus),
but it will use and support OpenTelemetry in the future, too.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A distributed trace in OpenTracing consists of a set of spans.
Each span represents a logical unit of work executed.
The spans can form a tree when a larger part of the business transaction represented by one span can be compounded of multiple tasks represented by additional spans that have a parent-child relationship to the main span.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenTracing is only the specification and the instrumentation API.
To use it you need to have an implementation, too.
While Debezium could be used any OpenTracing client implementation, our examples and documentation are based on the &lt;a href=&quot;https://www.jaegertracing.io/&quot;&gt;Jaeger&lt;/a&gt; distributed tracing platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jaeger consists of multiple components responsible for data collection and storage as well as a graphical user interface in form of a web application.
The Jaeger &lt;a href=&quot;https://www.jaegertracing.io/docs/1.21/getting-started/#all-in-one&quot;&gt;All-In-One&lt;/a&gt; container image will be used to simplify the deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;debezium_and_opentracing&quot;&gt;Debezium and OpenTracing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Debezium integration with OpenTracing consists of three distinct components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ActivateTracingSpan&lt;/code&gt; SMT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EventDispatcher&lt;/code&gt; in the &lt;a href=&quot;/documentation/reference/integrations/outbox.html&quot;&gt;Debezium outbox extension&lt;/a&gt; for Quarkus applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EventRouter&lt;/code&gt; &lt;a href=&quot;/documentation/reference/configuration/outbox-event-router.html&quot;&gt;SMT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first one is intended for general use.
The latter two must be used hand-in-hand when a (Quarkus-based) service using the outbox pattern should be traced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;outbox_distributed_tracing&quot;&gt;Outbox Distributed Tracing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest problem with tracing integration is keeping the trace across process boundaries so that all the related spans are recorded in the same trace to enable end-to-end tracing.
The OpenTracing specification provides a way how to export and import trace related metadata so the trace can be passed among different processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the outbox extension we use this approach to export the metadata into a specific column in the outbox table, so that then the event router SMT can import them and resume the trace. In each of the steps executed one or more spans are created:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When an event arrives at &lt;code&gt;EventDispatcher&lt;/code&gt; a new span &lt;code&gt;outbox-write&lt;/code&gt; is created.
It is created as a child of a current active span (e.g. started by the invocation of an REST API of the current application), or as a root span if no parent span is available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The span metadata is exported into a distinct field of the outbox event.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The outbox event is written to the outbox table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Event Router SMT receives the event and imports the span metadata from the field&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two new spans are created&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;db-log-write&lt;/code&gt; with its start timestamp set to database write timestamp.
The fields from the &lt;code&gt;source&lt;/code&gt; block are added to the span as &lt;strong&gt;tags&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;debezium-read&lt;/code&gt; with its start time set to the processing timestamp.
Fields from the envelope are added to the span as &lt;strong&gt;tags&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, if OpenTracing integration is enabled at the Kafka producer level, a new span is created by the Kafka producer representing the write of the message to a Kafka topic with relevant metadata.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/outbox&quot;&gt;outbox example&lt;/a&gt; was extended with distributed tracing support to demonstrate the functionality.
This example contains two rudimentary microservices: an order service which exposes a REST API for placing purchase orders, and a shipment service which is notified by the order service about new purchase orders using the outbox pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demo uses the &lt;a href=&quot;https://strimzi.io/&quot;&gt;Strimzi&lt;/a&gt; container image for Kafka Connect, as it already contains baked-in integration of OpenTracing at Kafka producer level.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try it yourself you need to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check out the repository and switch to the &lt;code&gt;outbox&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build the services&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ mvn clean install&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;deploy the application&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;export DEBEZIUM_VERSION=1.4
docker-compose up --build&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;register a Debezium connector to listen on the outbox table&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ http PUT http://localhost:8083/connectors/outbox-connector/config &amp;lt; register-postgres.json
HTTP/1.1 201 Created&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;execute multiple business requests&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ http POST http://localhost:8080/orders &amp;lt; resources/data/create-order-request.json
$ http PUT http://localhost:8080/orders/1/lines/2 &amp;lt; resources/data/cancel-order-line-request.json&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;check the &lt;a href=&quot;http://localhost:16686/&quot;&gt;Jaeger UI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After all the steps above were completed you should see an introduction screen of the Jaeger UI:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock centered-image&quot;&gt;
    &lt;img src=&quot;/assets/images/tracing-tutorial/tracing-main.png&quot; class=&quot;responsive-image&quot; alt=&quot;Jaeger intro&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Filter on &lt;code&gt;order-service&lt;/code&gt; as a service and click on &lt;code&gt;Find Traces&lt;/code&gt;.
Two traces should be available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock centered-image&quot;&gt;
    &lt;img src=&quot;/assets/images/tracing-tutorial/tracing-service.png&quot; class=&quot;responsive-image&quot; alt=&quot;Service traces&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the &lt;code&gt;addOrder&lt;/code&gt; service.
A tree will open that displays how the initial request incoming via REST API was&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;written to the database by the outbox extension&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read by Debezium and processed by outbox SMT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;written to a Kafka topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read from a Kafka topic by &lt;code&gt;shipment-service&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;processed in the different &lt;code&gt;shipment-service&lt;/code&gt; business methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock centered-image&quot;&gt;
    &lt;img src=&quot;/assets/images/tracing-tutorial/tracing-trace.png&quot; class=&quot;responsive-image&quot; alt=&quot;Service traces&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the &lt;code&gt;db-log-write&lt;/code&gt; and &lt;code&gt;debezium-read&lt;/code&gt; spans.
The &lt;strong&gt;tags&lt;/strong&gt; of each of them contain extracted Debezium-related metadata like &lt;code&gt;operation&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; fields:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock centered-image&quot;&gt;
    &lt;img src=&quot;/assets/images/tracing-tutorial/tracing-debezium-details.png&quot; class=&quot;responsive-image&quot; alt=&quot;Service traces&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blogpost, we have discussed what distributed tracing is and why it is beneficial to use it.
We have seen how the distributed tracing integration is done at the Debezium level to enable end-to-end tracing and tried a demo application together with Jaeger UI exploration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this example was focused on the specific use case of microservices data exchange via the outbox pattern,
Debezium integrates with distributed tracing also independently of this particular pattern.
By means of the &lt;code&gt;ActivateTracingSpan&lt;/code&gt; SMT, Debezium can produce spans representing the time of the change in the source database itself,
as well as the time of processing the event by the Debezium connector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for distributed tracing is a new feature in Debezium 1.4 (originally added in Beta1) and will evolve and mature in subsequent releases.
Your feedback on this new functionality is highly welcomed!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 16 Dec 2020 11:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2020/12/16/distributed-tracing-with-debezium/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/12/16/distributed-tracing-with-debezium/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.0.Beta1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.4.0.Beta1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes support for distributed tracing,
lowercase table and schema naming for Db2,
specifying MySQL snapshot records as create or read operations,
and enhancements to Vitess for nullable and primary key columns.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2020/12/09/debezium-1-4-beta1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/12/09/debezium-1-4-beta1-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.0.Alpha2 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m excited to announce the release of Debezium &lt;strong&gt;1.4.0.Alpha2&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This second pass of the 1.4 release line provides a few useful new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New API hook for the PostgreSQL &lt;code&gt;Snapshotter&lt;/code&gt; interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field renaming using &lt;code&gt;ExtractNewRecordState&lt;/code&gt; SMT&amp;#8217;s &lt;code&gt;add.fields&lt;/code&gt; and &lt;code&gt;add.headers&lt;/code&gt; configurations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
				
				<pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2020/11/17/debezium-1-4-alpha2-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/11/17/debezium-1-4-alpha2-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.3.1.Final Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m excited to announce the release of Debezium &lt;strong&gt;1.3.1.Final&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release primarily focuses on bugs that were reported after the 1.3 release.
Most importantly, the following bugs were fixed related to the &lt;a href=&quot;/docs/connectors/oracle&quot;&gt;Debezium connector for Oracle&lt;/a&gt; LogMiner adapter thanks to the continued feedback by the Debezium community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQLExceptions thrown when using Oracle LogMiner (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2624&quot;&gt;DBZ-2624&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LogMiner mining session stopped due to WorkerTask killed (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2629&quot;&gt;DBZ-2629&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
				<link>https://debezium.io/blog/2020/11/12/debezium-1-3-1-final-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/11/12/debezium-1-3-1-final-released/</guid>
			</item>
		
			<item>
				<title>Streaming Vitess at Bolt</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post originally appeared on the &lt;a href=&quot;https://medium.com/bolt-labs/streaming-vitess-at-bolt-f8ea93211c3f&quot;&gt;Bolt Labs Engineering blog&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally, MySQL has been used to power most of the backend services at &lt;a href=&quot;https://bolt.eu/en/&quot;&gt;Bolt&lt;/a&gt;. We&amp;#8217;ve designed our schemas in a way that they&amp;#8217;re sharded into different MySQL clusters. Each MySQL cluster contains a subset of data and consists of one primary and multiple replication nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once data is persisted to the database, we use the &lt;a href=&quot;https://debezium.io/documentation/reference/connectors/mysql.html&quot;&gt;Debezium MySQL Connector&lt;/a&gt; to &lt;a href=&quot;https://www.confluent.io/blog/how-bolt-adopted-cdc-with-confluent-for-real-time-data-and-analytics/&quot;&gt;capture data change events&lt;/a&gt; and send them to Kafka. This gives us an easy and reliable way to communicate changes between back-end microservices.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 04 Nov 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/11/04/streaming-vitess-at-bolt/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/11/04/streaming-vitess-at-bolt/</guid>
			</item>
		
			<item>
				<title>Hello Debezium!</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello everyone, my name is Anisha Mohanty and I recently joined Red Hat and the Debezium team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started my journey with Red Hat in April 2020 after completing my graduation. I was introduced to open source in my early college days, but I wasn&amp;#8217;t aware of how organizations work and wanted to get the essence of open source ethics and values. That is something that I am fascinated to learn as I joined Red Hat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My work started under the Data Virtualization team with Teiid and then under the &lt;a href=&quot;https://graphqlcrud.org/&quot;&gt;GRAPHQLCRUD&lt;/a&gt; project which is a standard for a generic query interface on top of GraphQL. The project has started well and is in great shape right now. We have successfully added CRUD capabilities, paging, and filtering specifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coming to Debezium, I first heard about it as some DV members started contributing here, well back then it was a completely new thing for me. I started exploring more, and it was not long when I had my first interaction with Gunnar and Jiri. With a warm welcome and great team here, I am really excited to work with the Debezium Community.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Tue, 27 Oct 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/10/27/hello-debezium/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/10/27/hello-debezium/</guid>
			</item>
		
			<item>
				<title>Debezium 1.4.0.Alpha1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am excited to announce the release of Debezium &lt;strong&gt;1.4.0.Alpha1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This first pass of the 1.4 release line provides a few useful new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New Vitess connector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow fine-grained selection of snapshotted tables&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the community fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.4.0.Alpha1%20ORDER%20BY%20issuetype%20DESC&quot;&gt;41 issues&lt;/a&gt; for this release.
Let&amp;#8217;s take a closer look at some of the highlights.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Fri, 23 Oct 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/10/23/debezium-1-4-alpha1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/10/23/debezium-1-4-alpha1-released/</guid>
			</item>
		
			<item>
				<title>Towards a Graphical Debezium User Interface</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the last five years, Debezium has become a leading open-source solution for change data capture for a variety of databases.
Users from all kinds of industries work with Debezium for use cases like replication of data from operational databases into data warehouses, updating caches and search indexes, driving streaming queries via Kafka Streams or Apache Flink, synchronizing data between microservices, and many more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When talking to Debezium users, we generally receive very good feedback on the range of applications enabled by Debezium and its flexibility: e.g. each connector can be configured and fine-tuned in many ways, depending on your specific requirements. A large number of metrics provide deep insight into the state of running Debezium connectors,
allowing to safely operate CDC pipelines also in huge installations with thousands of connectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All this comes at the cost of a learning curve, though: users new to Debezium need to understand the different options and settings as well as learn about best practices for running Debezium in production.
We&amp;#8217;re therefore constantly exploring how the user experience of Debezium can be further improved, allowing people to set up and operate its connectors more easily.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 22 Oct 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/10/22/towards-debezium-ui/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/10/22/towards-debezium-ui/</guid>
			</item>
		
			<item>
				<title>Debezium Community Stories With... Renato Mefi</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome to the first edition of &quot;Debezium Community Stories With&amp;#8230;&amp;#8203;&quot;, a new series of interviews with members of the Debezium and change data capture community, such as users, contributors or integrators. We&amp;#8217;re planning to publish more parts of this series in a loose rhythm, so if you&amp;#8217;d like to be part of it, please let us know.
In today&amp;#8217;s edition it&amp;#8217;s my pleasure to talk to &lt;a href=&quot;https://twitter.com/renatomefi&quot;&gt;Renato Mefi&lt;/a&gt;, a long-time Debezium user and contributor.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 08 Oct 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/10/08/debezium-community-stories-with-renato-mefi/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/10/08/debezium-community-stories-with-renato-mefi/</guid>
			</item>
		
			<item>
				<title>Debezium 1.3.0.Final Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s with great please that I&amp;#8217;m announcing the release of Debezium &lt;strong&gt;1.3.0.Final&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As per Debezium&amp;#8217;s quarterly release cadence, this wraps up the work of the last three months.
Overall, the community has fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20in%20(1.3.0.Final%2C%201.3.0.Alpha1%2C%201.3.0.Beta1%2C%201.3.0.Beta2%2C%201.3.0.CR1)%20ORDER%20BY%20issuetype%20DESC%2C%20updated%20DESC%2C%20priority%20DESC&quot;&gt;138 issues&lt;/a&gt; during that time, including the following key features and changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A new incubating &lt;a href=&quot;/documentation/reference/connectors/oracle.html#_logminer&quot;&gt;LogMiner-based implementation&lt;/a&gt; for ingesting change events from Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for Azure Event Hubs in &lt;a href=&quot;/documentation/reference/operations/debezium-server.html&quot;&gt;Debezium Server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Apache Kafka 2.6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revised &lt;a href=&quot;https://debezium.io/blog/2020/09/03/debezium-1-3-beta1-released/&quot;&gt;filter option names&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new SQL Server connector snapshot mode, &lt;code&gt;initial_only&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for database-filtered columns for SQL Server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional connection options for the MongoDB connector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements to &lt;code&gt;ByteBufferConverter&lt;/code&gt; for implementing the &lt;a href=&quot;/documentation/reference/configuration/outbox-event-router.html&quot;&gt;outbox pattern&lt;/a&gt; with Avro as the payload format&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 01 Oct 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/10/01/debezium-1-3-final-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/10/01/debezium-1-3-final-released/</guid>
			</item>
		
			<item>
				<title>Debezium 1.3.0.CR1 Released</title>
				
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m very happy to announce the release of Debezium &lt;strong&gt;1.3.0.CR1&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we approach the final stretch of Debezium 1.3 Final,
we took this opportunity to add delegate converter support for the &lt;code&gt;ByteBufferConverter&lt;/code&gt; and introduce a &lt;code&gt;debezium-scripting&lt;/code&gt; module.
In addition, there&amp;#8217;s also a range of bug fixes and quite a bit of documentation polish;
overall, not less than &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.3.0.CR1%20ORDER%20BY%20issuetype%20DESC&amp;amp;startIndex=20&quot;&gt;15 issues&lt;/a&gt; have been resolved for this release.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Thu, 24 Sep 2020 16:19:59 +0000</pubDate>
				<link>https://debezium.io/blog/2020/09/24/debezium-1-3-cr1-released/</link>
				<guid isPermaLink="true">https://debezium.io/blog/2020/09/24/debezium-1-3-cr1-released/</guid>
			</item>
		
	</channel>
</rss>
